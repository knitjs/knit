/* @flow weak */

import path from 'path';
import execa from 'execa';
import fs from 'fs-extra';
import * as rp from 'read-pkg';

import needle from '@knit/needle';
import depchek from '@knit/depcheck';

export const isScoped = (module) => module[0] === '@';

export const getModuleName = (module) => module.replace(/@.*?\//, '');

export const readPkg = (dir) => {
  try {
    return rp.sync(path.join(needle.paths.modules, dir), {
      normalize: false,
    });
  } catch (err) {
    throw {
      message: `could not find a \`package.json\` in ${path.join(needle.paths.modulesStub, dir)}.`,
      stderr: `All directories under ${needle.paths.modulesStub} are expected to be node modules. To ignore a directory add a 'private: true' to the package.json.`,
    };
  }
};

export const findDependencies = (dir) => (
   depchek(path.join(needle.paths.modules, dir))
    .then(res => Object.keys(res.using))
    .then(using => {
      const pkg = readPkg(dir);
      const deps = Object.keys((pkg || {}).dependencies || {});

      return using.concat(deps);
    })
    .then(using => using.reduce((acc, d) => (acc.includes(d) ? acc : acc.concat(d)), []))
    .then(using => using.sort())
);

export const findMissingDependencies = (using, modules) => {
  const installed = Object.keys(needle.pkg.dependencies || {});

  return using.filter(m => !installed.includes(m) && !modules.includes(m));
};

export const findUnusedDependencies = (using, modules) => {
  const installed = Object.keys(needle.pkg.dependencies || {});

  return installed.filter(m => !using.includes(m) && !modules.includes(m));
};

export const findInternalDependencies = (using, modules) => (
   using.filter(m => (
    modules.includes(m)
  ))
);

export const findModules = () => {
  try {
    return fs.readdirSync(needle.paths.modules)
      .reduce((acc, d) => (
        isScoped(d)
          ? acc.concat(fs.readdirSync(path.join(needle.paths.modules, d)).map(dir => path.join(d, dir)))
          : acc.concat(d)
      ), []).filter(d => fs.statSync(path.join(needle.paths.modules, d)).isDirectory());
  } catch (err) {
    throw {
      message: 'Modules directory could not be read.',
      stderr: `Make sure your modules are in \`${needle.paths.modulesStub}\``,
    };
  }
};

export const findPublicModules = () => (
   findModules().filter(m => {
     const pkg = readPkg(m);
     return pkg && !pkg.private;
   })
);

export const findModifiedSince = (modules, tag) => {
  const output = execa.sync('git', ['diff', '--dirstat=files,0', tag, '--', needle.paths.modulesStub]);
  const lines = (output.stdout || '').split('\n').filter(x => x.length);

  const modified = lines.map(l => {
    const [scope, name] = l.split(`${needle.paths.modulesStub}/`)[1].split('/');
    return isScoped(scope) ? [scope, name].join('/') : scope;
  }).filter(
    Boolean
  ).reduce(
    (acc, m) =>
       (acc.includes(m) ? acc : acc.concat(m))
  , []).filter(
    m => modules.includes(m)
  );

  return modified;
};

export const findAllDependencies = (modules) => (
   modules.reduce((acc, mod) =>
     Promise.all([acc, findDependencies(mod)]).then(
      vals => (
        vals[0].concat(vals[1], modules)
      )
    ).then(ms => (
      ms.reduce((a, m) => (
        (a.includes(m) ? a : a.concat(m))
      ), [])
    ))
  , [])
);

export const findAllMissingDependencies = (modules) => (
  findAllDependencies(modules).then(using => (
    findMissingDependencies(using, modules)
  ))
);

export const findAllUnusedDependencies = (modules) => (
  findAllDependencies(modules).then(using => (
    findUnusedDependencies(using, modules)
  ))
);

export const makeDependencyMap = (modules) => (
  modules.reduce((acc, m) => (
    Promise.all([acc, findDependencies(m)]).then(
      vals => ({
        ...vals[0],
        [m]: vals[1],
      })
    )
  ), {})
);

export const resolveCascadingUpdates = (modules, mapping, modified) => {
  const next = modules.reduce((acc, module) => {
    if (acc.includes(module)) return acc;
    const deps = mapping[module] || [];

    if (deps.some(d => acc.includes(d))) {
      return acc.concat(module);
    }

    return acc;
  }, modified);

  if (next.length !== modified.length) {
    return resolveCascadingUpdates(modules, mapping, next);
  }

  return modified;
};

export const findUpdatedSince = (modules, tag) => {
  // files modified according to git
  const modifiedModules = findModifiedSince(modules, tag);
  // map of {module: [module dependencies]}
  return makeDependencyMap(modules).then(dependencyMap =>
     resolveCascadingUpdates(modules, dependencyMap, modifiedModules)
  );
};

export const getDependencyVersion = (dep, modules, updated, nextVersion) => {
  if (needle.pkg.dependencies && needle.pkg.dependencies[dep]) {
    return needle.pkg.dependencies[dep];
  } else if (updated.includes(dep)) {
    return nextVersion;
  } else if (modules.includes(dep)) {
    const pkg = readPkg(dep);
    if (pkg && pkg.version) {
      return pkg.version;
    }
  }

  throw {
    message: `Missing dependency: ${dep}`,
    stderr: `Could not find ${dep} in the project package.json. Try \`yarn add ${dep}\`.`,
  };
};

export const getPeerDependencyVersion = (pkg, dep, modules, updated, nextVersion) => {
  const version = (pkg.peerDependencies && pkg.peerDependencies[dep])
    ? pkg.peerDependencies[dep]
    // $FlowIgnore
    : needle.pkg.peerDependencies[dep];

  if (version === '*') {
    const v = (needle.pkg.devDependencies && needle.pkg.devDependencies[dep])
      ? needle.pkg.devDependencies[dep]
      : getDependencyVersion(dep, modules, updated, nextVersion);

    return parseInt(v.replace(/^[^\d]/, ''), 10).toString();
  }

  return version;
};

export const getOptionalDependencyVersion = (pkg, dep, modules, updated, nextVersion) => {
  const version = (pkg.optionalDependencies && pkg.optionalDependencies[dep])
    ? pkg.optionalDependencies[dep]
    // $FlowIgnore
    : needle.pkg.optionalDependencies[dep];

  if (version === '*') {
    const v = getDependencyVersion(dep, modules, updated, nextVersion);

    return parseInt(v.replace(/^[^\d]/, ''), 10).toString();
  }

  return version;
};

export const updateModulePkg = (pkg, modules, used, updated, version) => {
  const projectPkg = needle.pkg;
  const deps = used.concat(Object.keys(pkg.dependencies || {}));
  const peers = Object.keys(pkg.peerDependencies || {}).concat(
    Object.keys(projectPkg.peerDependencies || {})
  );
  const opts = Object.keys(pkg.optionalDependencies || {}).concat(
    Object.keys(projectPkg.optionalDependencies || {})
  );
  const nextVersion = version || projectPkg.version;

  return ({
    homepage: projectPkg.homepage,
    license: projectPkg.license,
    bugs: projectPkg.bugs,
    tags: projectPkg.tags,
    keywords: projectPkg.keywords,
    files: projectPkg.files,
    repository: projectPkg.repository,
    engines: projectPkg.engines,
    author: projectPkg.author,
    private: false,
    ...pkg,
    ...{
      main: path.join(needle.paths.distStub, needle.paths.libStub, 'index.js'),
        // fall back to project package if no version given in workflow
      version: nextVersion,
      dependencies: deps.filter(d => !peers.includes(d)).reduce((acc, d) => ({
        ...acc,
        [d]: getDependencyVersion(d, modules, updated, nextVersion),
      }), {}),
      peerDependencies: peers.reduce((acc, d) => ({
        ...acc,
        [d]: getPeerDependencyVersion(pkg, d, modules, updated, nextVersion),
      }), {}),
      optionalDependencies: opts.reduce((acc, d) => ({
        ...acc,
        [d]: getOptionalDependencyVersion(pkg, d, modules, updated, nextVersion),
      }), {}),
    },
  });
};

export const updateModulePkgBrowser = (pkg) => ({
  ...pkg,
  ...{
    'jsnext:main': path.join(needle.paths.distStub, needle.paths.es6Stub, 'index.js'),
    browser: path.join(needle.paths.distStub, needle.paths.umdStub, 'index.min.js'),
  },
});
