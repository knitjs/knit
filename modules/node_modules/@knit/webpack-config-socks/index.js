/* @flow */
/* eslint flowtype/no-weak-types: 0 */

import type { TJson } from '@knit/needle';

export type TLoader = {|
  test: RegExp,
  loader?: string,
  laoders?: Array<string>,
  exclude?: string | Array<string>,
  include?: string | Array<string>,
  query?: TJson,
|};

export type TRule = {|
  test: RegExp,
  enforce?: string,
  loader?: string,
  use?: Array<string>,
  exclude?: string | Array<string>,
  include?: string | Array<string>,
  options?: TJson,
|};

export type TDevServer = {|
  contentBase: string,
  stats: {
    colors: boolean,
    hash: boolean,
    timings: boolean,
    chunks: boolean,
    chunkModules: boolean,
    modules: boolean,
  },
  publicPath: string,
|};

export type TOutput = {|
  auxiliaryComment?: any,
  chunkFilename?: string,
  crossOriginLoading?: boolean,
  devtoolFallbackModuleFilenameTemplate?: string,
  devtoolLineToLine?: boolean,
  devtoolModuleFilenameTemplate?: string,
  filename?: string,
  hashDigest?: boolean,
  hashDigestLength?: boolean,
  hashFunction?: any,
  hotUpdateChunkFilename?: string,
  hotUpdateFunction?: any,
  hotUpdateMainFilename?: string,
  jsonpFunction?: string,
  library?: string,
  libraryTarget?: string,
  path?: string,
  pathinfo?: boolean,
  publicPath?: string,
  sourceMapFilename?: string,
  sourcePrefix?: string,
  strictModuleExceptionHandling?: string,
  umdNamedDefine?: string,
|};

export type TConfig = {|
  devServer?: TDevServer,
  devtool?: string,
  target?: string,
  bail?: boolean,
  debug?: boolean,
  profile?: boolean,
  entry?: {
    [k: string]: Array<string>,
  },
  pathInfo?: boolean,
  output?: TOutput,
  module?: {
    rules?: Array<TRule>,
    preLoaders?: Array<TLoader>,
    loaders?: Array<TLoader>,
    postLoaders?: Array<TLoader>,
    noParse?: Array<RegExp>,
  },
  resolve?: {
    modules?: Array<string>,
  },
  resolveLoader?: {
    moduleExtensions?: Array<string>,
  },
  plugins?: Array<mixed>,
  externals?: Array<string>,
|};

// $FlowIgnore
const webpackConfig: TConfig = process.env.NODE_ENV === 'production'
  ? require('./production')
  : require('./stage');

export default webpackConfig;
