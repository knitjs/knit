/* @flow */

import type { TModules } from '@knit/knit-core';
import type { TPkgJson } from '@knit/needle';

import yarn from '@knit/yarn-utils';

const Listr = require('listr');

const knit = require('@knit/knit-core');
const needle = require('@knit/needle');

type TCtx = {
  modules: TModules,
  pkgs: {[k: string]: TPkgJson},
  updated: TModules,
};

const createPublishTask = (m: string) => ({
  title: m,
  skip: (ctx: TCtx) => yarn.publishedVersion(m).then(publishedVersion => (
    publishedVersion === ctx.pkgs[m].version && `${ctx.pkgs[m].version} already published`
  )).catch(() => false),
  task: () => (
    yarn.publish({ cwd: knit.pathJoin(needle.paths.dist, m) })
     .catch(err => {
       if (err.stderr.indexOf('npm ERR! publish Failed PUT 404') === 0) {
         throw Object.assign({}, err, {
           message: `could not publish ${m}`,
           stderr: 'NPM returned a 404 error when trying to publish which typically means you do not have access to the module. To make sure you are logged in to the correct account type `npm whoami`',
         });
       } else {
         throw err;
       }
     })
  ),
});

const tasks = [
  {
    title: 'publishing updated modules',
    task: (ctx: TCtx) => new Listr(ctx.updated.map(createPublishTask)),
  },
];

module.exports = tasks;
