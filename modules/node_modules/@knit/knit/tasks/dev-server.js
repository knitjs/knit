/* @flow */

import chalk from 'chalk';
import path from 'path';
import express from 'express';
import proxy from 'express-http-proxy';
import gzipStatic from 'connect-gzip-static';
import webpack from 'webpack';

import needle from '@knit/needle';
import webpackConfig from '@knit/webpack-config-socks-app';

const host = needle.server.host;
const port = needle.server.port;

const app = express();

const staticDir = needle.paths.modules;
const indexFile = path.join(needle.paths.entry, 'index.html');

app.use(gzipStatic(staticDir));

const compiler = webpack(webpackConfig);

app.use(require('webpack-dev-middleware')(compiler, webpackConfig.devServer));
app.use(require('webpack-hot-middleware')(compiler));

app.use('/api', proxy(needle.proxy, {
  forwardPath: req => (
    require('url').parse(req.url).path
  ),
}));

// $FlowFixMe
app.get(/^((?!(.js|.css|.ico)).)*$/, (req, res) => {
  res.sendFile(indexFile);
});

app.listen(port, host, () => {
  console.log('⌛  Webpack bundling assets for the first time...');
  console.log(`⚡  Server running at ${chalk.white(`http://${host}:${port}`)}`);
  console.log(`➾  Proxying ${chalk.white('/api')} to API running at ${chalk.white(needle.proxy)}`);
});
