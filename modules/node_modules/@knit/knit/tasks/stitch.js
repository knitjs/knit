/* @flow */

import type { TModules } from '@knit/knit-core';
import type { TPkgJson } from '@knit/needle';

import Listr from 'listr';
import writePkg from 'write-pkg';

import { findDependencies } from '@knit/find-dependencies';


const knit = require('@knit/knit-core');
const pathJoin = require('@knit/path-join');
const needle = require('@knit/needle');

type TCtx = {
  modules: TModules,
  pkgs: {[k: string]: TPkgJson},
  updated: TModules,
  version: string,
};

const createKnitTask = (m) => ({
  title: m,
  task: (ctx: TCtx) => findDependencies(m, needle.paths).then(used => {
    const pkg = ctx.pkgs[m];
    const pkgM = knit.updateModulePkg({
      internal: ctx.modules,
      used,
      updated: ctx.updated,
    }, {
      paths: needle.paths,
      rootPkg: needle.pkg,
      pkg,
      version: ctx.version,
    });

    return pkgM;
  }).then(pkg => (
    writePkg(
      pathJoin(needle.paths.dist, m),
      pkg
    )
  )),
});

const tasks = [
  {
    title: 'stitching together updated modules',
    task: (ctx: TCtx) => new Listr(ctx.modules.map(createKnitTask), { concurrent: true }),
  },
];

module.exports = tasks;
