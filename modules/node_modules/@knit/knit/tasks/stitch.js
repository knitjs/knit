/* @flow weak */

const path = require('path');
const Listr = require('listr');
const writePkg = require('write-pkg');

const needle = require('@knit/needle');
const knit = require('@knit/knit-core');


const createKnitTask = (m) => ({
  title: m,
  task: ctx => knit.findDependencies(m, needle.paths).then(used => {
    const pkg = ctx.pkgs[m];
    const pkgM = knit.updateModulePkg(pkg, ctx.modules, used, ctx.updated, ctx.version);
    if (pkg.browser) {
      return knit.updateModulePkgBrowser(pkgM, needle.paths);
    }

    return pkgM;
  }).then(pkg => (
    writePkg(
      path.join(needle.paths.modules, m),
      pkg
    )
  )),
});

const tasks = [
  {
    title: 'stitching together updated modules',
    task: ctx => new Listr(ctx.updated.map(createKnitTask), { concurrent: true }),
  },
];

module.exports = tasks;
