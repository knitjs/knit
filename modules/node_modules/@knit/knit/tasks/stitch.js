/* @flow */

import type { TModules } from '@knit/knit-core';
import type { TPkgJson } from '@knit/needle';

const Listr = require('listr');
const writePkg = require('write-pkg');

const knit = require('@knit/knit-core');
const needle = require('@knit/needle');

type TCtx = {
  modules: TModules,
  pkgs: {[k: string]: TPkgJson},
  updated: TModules,
  version: string,
};

const createKnitTask = (m) => ({
  title: m,
  task: (ctx: TCtx) => knit.findDependencies(m, needle.paths).then(used => {
    const pkg = ctx.pkgs[m];
    const pkgM = knit.updateModulePkg({
      internal: ctx.modules,
      used,
      updated: ctx.updated,
    }, {
      paths: needle.paths,
      rootPkg: needle.pkg,
      pkg,
      version: ctx.version,
    });
    if (pkg.browser) {
      return knit.updateModulePkgBrowser(pkgM, needle.paths);
    }

    return pkgM;
  }).then(pkg => (
    writePkg(
      knit.pathJoin(needle.paths.modules, m),
      pkg
    )
  )),
});

const tasks = [
  {
    title: 'stitching together updated modules',
    task: (ctx: TCtx) => new Listr(ctx.updated.map(createKnitTask), { concurrent: true }),
  },
];

module.exports = tasks;
