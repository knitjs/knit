/* @flow */

import type { TModules } from '@knit/knit-core';

const Listr = require('listr');
const chalk = require('chalk');

const knit = require('@knit/knit-core');
const log = require('@knit/logger');
const errors = require('@knit/nice-errors');
const tasks = require('@knit/common-tasks');
const needle = require('@knit/needle');

type TArgv = {
  modules: TModules,
  scope: Array<string>,
  ignore: Array<string>,
  'show-dependencies': boolean,
  'only-updated': boolean,
};

module.exports = (argv: TArgv) => {
  new Listr([
    ...tasks.modules,
    ...tasks.packages,
    ...tasks.updated,
  ], {
    renderer: log.getRenderer(argv),
  }).run({
    scope: argv.scope,
    ignore: argv.ignore,
    force: !argv['only-updated'],
  }).then(ctx => {
    const publicModules = ctx.modules;
    const modules = ctx.updated;

    console.log();
    log.info(chalk.white(`showing dependencies for ${modules.length}${argv['only-updated'] ? ' updated ' : ' '}modules`));
    console.log();
    Promise.all(modules.map(m => knit.findDependencies(m, needle.paths).then(using => {
      const missing = knit.findMissingDependencies(using, publicModules, needle.pkg.dependencies);

      console.log(
        chalk.white(`- ${m}`),
        chalk.white(`(${ctx.pkgs[m].version})`),
        chalk.grey([
          `[${using.length} dependencies`,
          missing.length ? `, ${chalk.red(`${missing.length} missing`)}]` : ']',
        ].join(''))
      );

      if (argv['show-dependencies']) {
        if (using.length) {
          log.subtree(using.join(' '));
        }
        if (missing.length > 0) {
          log.missing();
          log.subtree(chalk.white(missing.join(' ')));
        }
        console.log();
      }
    }).catch(errors.catchErrors)));
  }).catch(errors.catchErrors);
};
