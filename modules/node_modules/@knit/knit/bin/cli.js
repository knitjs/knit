#!/usr/bin/env node

/* @flow */

const updateNotifier = require('update-notifier');
const readPkgUp = require('read-pkg-up');

const pkg = readPkgUp.sync({ cwd: __dirname }).pkg;

require('yargs') // eslint-disable-line no-unused-expressions
  .version(pkg.version)
  .options({
    verbose: {
      describe: 'Use verbose renderer output',
      type: 'boolean',
      global: true,
    },
    silent: {
      describe: 'Use silent renderer output',
      type: 'boolean',
      global: true,
    },
  })
  .command('list [modules...]', 'List modules and their dependencies',
  (y) => (
    y
      .options({
        d: {
          alias: 'dependencies',
          describe: 'Show dependencies for each module',
          type: 'boolean',
        },
        u: {
          alias: 'updated',
          describe: 'Limit search to updated modules',
          type: 'boolean',
        },
      })
  ), require('./cli-list'))
  .command('validate', 'Validate modules for release', y => y, require('./cli-validate'))
  .command('server', 'Start a dev server',
    (y) => (
      y
        .options({
          p: {
            alias: 'port',
            description: 'Set server port',
            type: 'number',
          },
          h: {
            alias: 'host',
            description: 'Set server host',
            type: 'string',
          },
          r: {
            alias: 'proxy',
            description: 'Set proxy uri',
            type: 'string',
          },
        })
    ), require('./cli-play'))
  .command('schema', 'Update graphql schema', yargs => yargs, require('./cli-relay'))
  .command('version <version>', 'Version updated modules',
  (y) => (
    y
      .demand(1)
      .options('f', {
        alias: 'force-all',
        description: 'Version all modules',
      })
      .options('s', {
        alias: 'skip-preflight',
        description: 'Skip preflight checks (not recommended)',
      })
  ), require('./cli-version'))
  .command('build', 'Build updated modules',
  (y) => (
    y
      .options('f', {
        alias: 'force-all',
        description: 'Build all modules.',
      })
      .options('s', {
        alias: 'skip-preflight',
        description: 'Skip preflight checks (not recommended)',
      })
  ), require('./cli-build'))
  .command('stitch', 'Update the package.json of all modules with knitted dependencies and project meta data',
  (y) => (
    y
      .options('f', {
        alias: 'force-all',
        description: 'Publish all modules',
      })
      .options('s', {
        alias: 'skip-preflight',
        description: 'Skip preflight checks (not recommended)',
      })
  ), require('./cli-stitch'))
  .command('publish', 'Publish updated modules',
  (y) => (
    y
      .options('f', {
        alias: 'force-all',
        description: 'Publish all modules',
      })
      .options('s', {
        alias: 'skip-preflight',
        description: 'Skip preflight checks (not recommended)',
      })
  ), require('./cli-publish'))
  .command('release <version>', 'Run full release pipeline on updated modules.\nversion > build > knit > publish > push',
  (y) => (
    y
      .demand(1)
      .options('f', {
        alias: 'force-all',
        description: 'Release all modules',
      })
      .options('s', {
        alias: 'skip-preflight',
        description: 'Skip preflight checks (not recommended)',
      })
  ), require('./cli-release'))
  .demand(1)
  .help()
  .argv;

const notifier = updateNotifier({
  pkg,
  updateCheckInterval: 1000 * 60 * 60 * 24 * 7, // 1 week
});
notifier.notify();
