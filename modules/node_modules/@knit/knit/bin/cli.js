#!/usr/bin/env node

/* @flow */

const updateNotifier = require('update-notifier');
const readPkgUp = require('read-pkg-up');

const pkg = readPkgUp.sync({ cwd: __dirname }).pkg;

const options = {
  scope: {
    describe: 'Limit scope of command to modules matching regex',
    type: 'array',
  },
  ignore: {
    describe: 'Ignore modules matching regex',
    type: 'array',
  },
  force: {
    alias: 'f',
    description: 'Run command on both up-to-date and updated modules',
    type: 'boolean',
  },
  skip: {
    alias: 's',
    description: 'Skip preflight checks (not recommended)',
    type: 'boolean',
  },
};

require('yargs') // eslint-disable-line no-unused-expressions
  .version(pkg.version)
  .options({
    verbose: {
      describe: 'Use verbose renderer output',
      type: 'boolean',
      global: true,
    },
    silent: {
      describe: 'Use silent renderer output',
      type: 'boolean',
      global: true,
    },
  })
  .command('list', 'List modules and their dependencies',
  (y) => (
    y
      .options({
        scope: options.scope,
        ignore: options.ignore,
        'show-dependencies': {
          alias: 'd',
          describe: 'Show dependencies for each module',
          type: 'boolean',
        },
        'only-updated': {
          alias: 'u',
          describe: 'Limit search to updated modules',
          type: 'boolean',
        },
      })
  ), require('./cli-list'))
  .command('run <script> [args...]', 'Run npm script on updated modules',
  (y) => y.demand(1).options(options), require('./cli-run'))
  .command('exec', 'Execute command on updated modules',
  (y) => y.options(options), require('./cli-exec'))
  .command('validate', 'Validate modules for release', y => y, require('./cli-validate'))
  .command('server', 'Start a dev server',
  (y) => (
    y
      .options({
        port: {
          description: 'Set server port',
          type: 'number',
        },
        host: {
          description: 'Set server host',
          type: 'string',
        },
        proxy: {
          description: 'Set proxy uri',
          type: 'string',
        },
      })
  ), require('./cli-play'))
  .command('schema', 'Update graphql schema', yargs => yargs, require('./cli-relay'))
  .command('copy', 'Copy a directory recursively',
  (y) => y.options({
    ...options,
    'ignore-path': {
      describe: 'Ignore folders/files matching regex',
      type: 'array',
    },
  }), require('./cli-copy'))
  .command('version <version>', 'Version updated modules',
  (y) => y.demand(1).options(options), require('./cli-version'))
  .command('stitch [modules...]', 'Update the package.json of all modules with knitted dependencies and project meta data',
  (y) => y.options(options), require('./cli-stitch'))
  .command('publish [modules...]', 'Publish updated modules',
  (y) => y.options(options), require('./cli-publish'))
  .command('release <version> [modules...]', 'Run full release pipeline on updated modules.\nversion > stitch > publish > push',
  (y) => y.demand(1).options(options), require('./cli-release'))
  .demand(1)
  .help()
  .argv;

const notifier = updateNotifier({
  pkg,
  updateCheckInterval: 1000 * 60 * 60 * 24 * 7, // 1 week
});
notifier.notify();
